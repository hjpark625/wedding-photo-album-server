name: Deploy to Amazon ECS

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - .github/**
      - README.md
      - .gitignore
    branches: ['main']

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: wedding-photo-server-repo
  ECS_SERVICE: wedding-photo-service
  ECS_CLUSTER: wedding-server-cluster
  ECS_TASK_DEFINITION: '.aws/task-definition-rendered.json'
  CONTAINER_NAME: wedding-photo-container
  PORT: 4000
  CSRF_SECRET_KEY: ${{ secrets.CSRF_SECRET_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
  AWS_CLOUDFRONT_DOMAIN: ${{ secrets.AWS_CLOUDFRONT_DOMAIN }}
  CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
  MAIN_DOMAIN: ${{ secrets.MAIN_DOMAIN }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Inject secrets into task definition
        run: |
          export PORT=${{ env.PORT }}
          export CSRF_SECRET_KEY=${{ secrets.CSRF_SECRET_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          export AWS_CLOUDFRONT_DOMAIN=${{ secrets.AWS_CLOUDFRONT_DOMAIN }}
          export CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          export MAIN_DOMAIN=${{ secrets.MAIN_DOMAIN }}
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export QR_ACCESS_SECRET_KEY=${{ secrets.QR_ACCESS_SECRET_KEY }}
          export QR_ACCESS_MASTER_SIGNATURE=${{ secrets.QR_ACCESS_MASTER_SIGNATURE }}
          export QR_ACCESS_MASTER_EXPIRES=${{ secrets.QR_ACCESS_MASTER_EXPIRES }}

          envsubst < .aws/task-definition.json > .aws/task-definition-rendered.json

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
